// *Асинхронный код*
//  setTimeout(log, 0) вызвать ЧЕРЕЗ ... мили сек
// const log = () => console.log('Im here');

// console.log('lets begin');
// отложеный вызов (асинхронный код)
// setTimeout(log, 0)
// первым аргументом залетает функция, которую мы хотим отложить
// а вторым интервал в милисек.
// console.log('so what we wait?');
// даже если интервал равен нулю, то функция сработает только после ВСЕГО синхронного кода


// *Очистка Timeout с помощью clearTimeout()*

// const logger = time => console.log(`лог через ${time}ms, потому что не отменили тайм аут`);
// const timerID = setTimeout(logger, 2000, 2000);
// Когда мы вызываем setTimeout(на своё место он вызывает идентификатор) - регистрируется таймер.И ему присваивается ID от 1 до бесконечности
// для того, чтобы потом можно было бы обращаться и отменять.
// Первый аргумент в setTimeout - сама функция, второй - на сколько отложить а следущие - будут переданы в параметры функции которую мы юзаем. Если эти параметры, конечно, там имеются
// console.log(timerID);
// Вернёт нам его айДишник - 1

// clearTimeout(timerID)
// Позволяет нам отменить выполнение функции, которую мы отправили в ожидание по определённому условию


// const shouldCancelTimer = Math.random() > 0.3;
// console.log(shouldCancelTimer);
// if (shouldCancelTimer) {
//     clearTimeout(timerID)
// }